/* 
5. Рассказать что знаешь про методы оптимизации веб-страницы. 
    1. Оптимизация статики (HTML, стили, логотип, шрифты и, возможно, изображения)
    2. Оптимизация изображений
        a) Выбор правильного формата
        — Вектор: не зависит от разрешения, как правило значительно компактнее. Идеально подходит для логотипов, иконок и простых изображений, основанных на геометрии.
        — Растр: подходит для высоко детализированных изображений, например, фотографий.
        — JPEG: для изображений с богатой цветовой палитрой (например, тех же фотографий)
        — PNG-8: для изображений с малым количеством цветовой
        — PNG-24: для изображений с прозрачными участками
        — GIF: для анимаций
    3. Оптимизация шрифтов
        a) Выбор правильного формата
        б) Ограничьте количество шрифтов
    4. Оптимизация JavaScript
*/

/* 
6. Рассказать про ограничения кроссдоменных запросов.
    1. Запрос на другой домен обязательно должен быть асинхронным

    Простыми считаются запросы, если они удовлетворяют следующим двум условиям:
    Простой метод: GET, POST или HEAD
    Простые заголовки – только из списка:
    — Accept
    — Accept-Language
    — Content-Language
    — Content-Type со значением application/x-www-form-urlencoded, multipart/form-data или text/plain.
    «Непростыми» считаются все остальные, например, запрос с методом PUT или с заголовком Authorization не подходит под ограничения выше.

    2. CORS для простых запросов
        a) Если сервер разрешает кросс-доменный запрос с этого домена – он должен добавить к ответу заголовок Access-Control-Allow-Origin, содержащий домен запроса (в данном случае «javascript.ru») или звёздочку *.
        б) При таких запросах не передаются куки и заголовки HTTP-авторизации
        в) Чтобы браузер передал вместе с запросом куки и HTTP-авторизацию, нужно поставить запросу xhr.withCredentials = true:

        При запросе с withCredentials сервер должен вернуть уже не один, а два заголовка:
        — Access-Control-Allow-Origin: домен
        — Access-Control-Allow-Credentials: true
    3. «Непростые» запросы

    Чтобы пресечь любые недопонимания, браузер использует предзапрос в случаях, когда:
    — Если метод – не GET / POST / HEAD.
    — Если заголовок Content-Type имеет значение отличное от application/x-www-form-urlencoded, multipart/form-data или text/plain, например application/xml.
    — Если устанавливаются другие HTTP-заголовки, кроме Accept, Accept-Language, Content-Language.
    …Любое из условий выше ведёт к тому, что браузер сделает два HTTP-запроса.
    Этот запрос использует метод OPTIONS. Он не содержит тела и содержит название желаемого метода в заголовке Access-Control-Request-Method
    На этот запрос сервер должен ответить статусом 200, без тела ответа, указав заголовки Access-Control-Allow-Method: метод и, при необходимости, Access-Control-Allow-Headers: разрешённые заголовки.
*/

/* 
7. Рассказать про то, что проиходит от момента вбивания адреса в адресную строку браузера до момента полной отрисовки страницы.
    (https://developer.mozilla.org/ru/docs/Learn/Getting_started_with_the_web/How_the_Web_works)
    1. Браузер обращается к DNS серверу и находит реальный адрес сервера.
    2. Браузер посылает HTTP запрос к серверу, запрашивая его отправить копию сайта для клиента. Это сообщение и все остальные данные, передаваемые между клиентом и сервером, передаются по интернет-соединению с использованием протокола TCP/IP.
    3. Если запрос клиента корректен, сервер отправляет клиенту статус "200 ОК", а затем начинает отправку файлов сайта в браузер в виде небольших порций, называемых пакетными данными.
    4. Браузер собирает маленькие куски в полноценный сайт и показывает его вам.
*/